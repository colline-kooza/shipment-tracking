// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  AGENT
  STAFF
}

// New Role model for flexible permission system
model Role {
  id          String   @id @default(cuid())
  displayName String // Human-readable name (e.g., "Shipment Manager")
  roleName    String   @unique // System name (e.g., "shipment_manager")
  description String?
  permissions String[] // Array of permission strings
  users       User[]   @relation("UserRoles")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roleName])
}

model User {
  id            String     @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  phone         String     @unique
  email         String     @unique
  emailVerified DateTime?
  image         String?
  jobTitle      String?
  role          UserRole   @default(USER) // Keep for backward compatibility
  roles         Role[]     @relation("UserRoles") // New many-to-many relationship
  password      String
  location      String? // Added for agent location tracking
  status        Boolean    @default(true)
  accounts      Account[]
  sessions      Session[]
  shipments     Shipment[] // Relation to shipments created by this user
  documents     Document[] // Relation to documents uploaded by this user
  isVerfied     Boolean    @default(false)
  token         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Customer {
  id            String  @id @default(cuid())
  name          String
  email         String?
  phone         String?
  contactPerson String?
  address       String?
  country       String?
  passport      String? // For individual customers
  company       String? // For company customers
  consignee     String? // Default consignee for this customer
  isActive      Boolean @default(true)
  notes         String?

  // Relationships
  shipments Shipment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Shipment {
  id               String          @id @default(cuid())
  reference        String          @unique
  trackingNumber   String?         @unique
  type             ShipmentType
  client           String?
  consignee        String?
  origin           String
  destination      String
  status           ShipmentStatus  @default(CREATED)
  container        String? // Used for sea freight
  truck            String? // Used for road freight
  airwayBillNumber String?
  arrivalDate      DateTime? // Make optional if it's not always present at creation
  statusUpdateDate DateTime? // New field to store the date of the last status update
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  invoiceStatus    InvoiceStatus   @default(PENDING)
  creator          User            @relation(fields: [createdBy], references: [id])
  createdBy        String
  documents        Document[]
  timeline         TimelineEvent[]
  checkpoints      Checkpoint[]
  Customer         Customer?       @relation(fields: [customerId], references: [id])
  customerId       String?
  TrackingEvent    TrackingEvent[]
}

model TrackingEvent {
  id         String         @id @default(cuid())
  status     ShipmentStatus
  location   String?
  notes      String? // Carrier notes
  timestamp  DateTime       @default(now())
  // Relations
  shipment   Shipment       @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  shipmentId String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  fileUrl    String? // New field for attached document URL
  fileType   DocumentType? // New field for attached document type
}

// Enums
enum PackageType {
  METALS
  WOODEN
  CARTON
  BAG
}

enum GoodsType {
  COMMERCIAL
  PERSONAL
  FRAGILE
  OTHER
}

enum ItemCondition {
  GOOD
  FAIR
  AVERAGE
  AS_RECEIVED
}

enum ShipmentType {
  SEA
  AIR
  ROAD
}

enum ShipmentStatus {
  CREATED // Initial status when shipment is created
  DOCUMENT_RECEIVED // Documents for the shipment have been received
  DOCUMENTS_SENT // Documents have been sent to relevant parties (e.g., customs)
  CARGO_ARRIVED // Cargo has arrived at the destination port/airport/border
  TRANSFERRED_TO_CFS // Cargo transferred to Container Freight Station (replaces DELIVERY_CONFIRMED)
  ENTRY_REGISTERED // Customs entry has been registered
  CUSTOM_RELEASED // Cargo cleared from customs (replaces CLEARED)
  DELIVERY_ORDER_OBTAINED // Delivery order has been obtained
  TAXES_PAID // Taxes and duties have been paid
  NIMULE_BORDER_RELEASED // Specific status for Nimule border release
  IN_TRANSIT // Shipment is currently in transit
  DELIVERED // Shipment has been delivered to the consignee
  EMPTY_RETURNED // Empty container/truck returned (replaces COMPLETED)
  DOCUMENT_REJECTED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  COMMERCIAL_INVOICE
  PACKING_LIST
  BILL_OF_LADING
  AIRWAY_BILL
  IMPORT_LICENCE
  CERTIFICATE_OF_CONFORMITY
  TAX_EXEMPTION
  CERTIFICATE_OF_ORIGIN
  CMR_WAYBILL
  LETTER_OF_AUTHORIZATION
}

model Document {
  id            String         @id @default(cuid())
  name          String
  type          DocumentType
  fileUrl       String
  uploadedAt    DateTime       @default(now())
  uploadedBy    User           @relation(fields: [userId], references: [id])
  userId        String
  shipment      Shipment?      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  referenceNo   String?
  shipmentId    String?
  status        DocumentStatus @default(PENDING)
  notes         String?
  notifications Notification[]
}

model TimelineEvent {
  id         String         @id @default(cuid())
  shipment   Shipment?      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  shipmentId String?
  status     ShipmentStatus
  notes      String?
  location   String?
  timestamp  DateTime       @default(now())
  createdBy  String
  fileUrl    String? // New field for attached document URL
  fileType   DocumentType? // New field for attached document type
}

model Checkpoint {
  id        String     @id @default(cuid())
  name      String
  location  String
  order     Int
  shipments Shipment[]
}

enum NotificationType {
  DOCUMENT_ALERT
  STATUS_CHANGE
  TASK_ASSIGNED
  DEADLINE_APPROACHING
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  title      String
  message    String
  isRead     Boolean          @default(false)
  timestamp  DateTime         @default(now())
  userId     String
  shipmentId String?
  documentId String?
  document   Document?        @relation(fields: [documentId], references: [id], onDelete: SetNull)
}
